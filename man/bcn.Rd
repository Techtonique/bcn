% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1_fit_bcn.R
\name{bcn}
\alias{bcn}
\title{Boosted Configuration Networks (BCN)}
\usage{
bcn(
  x,
  y,
  B = 10,
  nu = 0.1,
  col_sample = 1,
  lam = 0.1,
  r = 0.3,
  tol = 1e-10,
  type_optim = c("nlminb", "nmkb", "hjkb", "mads", "bobyqa", "newuoa", "uobyqa"),
  activation = c("sigmoid", "tanh"),
  method = c("greedy", "direct"),
  hidden_layer_bias = TRUE,
  verbose = FALSE,
  show_progress = TRUE,
  seed = 123
)
}
\arguments{
\item{x}{a matrix, containing the explanatory variables}

\item{y}{a factor, containing the variable to be explained}

\item{B}{a numeric, the number of iterations of the algorithm}

\item{nu}{a numeric, the learning rate of the algorithm}

\item{col_sample}{a numeric, the percentage of columns adjusted at each iteration}

\item{lam}{a numeric, defining lower and upper bounds neural network's coefficients}

\item{r}{a numeric, usually 0.99, 0.999, 0.999 etc.}

\item{tol}{a numeric, convergence tolerance for an early stopping}

\item{type_optim}{a string, the type of optimization procedure used for finding neural network's coefficients at each iteration ("nlminb", "nmkb", "hjkb", "mads",
"bobyqa", "newuoa", "uobyqa")}

\item{activation}{a string, the activation function (must be bounded)}

\item{method}{a string, 'greedy' or 'direct'}

\item{hidden_layer_bias}{a boolean, saying if there is a bias parameter in neural network's coefficients}

\item{verbose}{a boolean, controls verbosity (for checks)}

\item{show_progress}{a boolean, if TRUE, a progress bar is displayed}

\item{seed}{an integer, for reproducibility of results}
}
\value{
a list, an object of class 'bcn'
}
\description{
Boosted Configuration Networks (BCN)
}
\examples{

set.seed(1234)
train_idx <- sample(nrow(iris), 0.8 * nrow(iris))
X_train <- as.matrix(iris[train_idx, -ncol(iris)])
X_test <- as.matrix(iris[-train_idx, -ncol(iris)])
y_train <- iris$Species[train_idx]
y_test <- iris$Species[-train_idx]

fit_obj <- bcn::bcn(x = X_train, y = y_train, B = 10, nu = 0.335855,
lam = 10**0.7837525, r = 1 - 10**(-5.470031), tol = 10**-7,
activation = "tanh", type_optim = "nlminb")

print(predict(fit_obj, newx = X_test) == y_test)
print(mean(predict(fit_obj, newx = X_test) == y_test))

}
